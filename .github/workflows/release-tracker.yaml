name: Track Upstream Releases

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual triggering

env:
  UPSTREAM_REPO: "watchexec/watchexec"
  IMAGE_NAME: "watchexec-rs-release-tracker"

jobs:
  track-releases:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: "x86_64-unknown-linux-gnu"
            platform: "linux/amd64"
            tag_suffix: "-amd64"
            base_image: "debian:bookworm-slim"
            description: "Watchexec x86_64 GNU/Linux"
          - arch: "x86_64-unknown-linux-musl"
            platform: "linux/amd64"
            tag_suffix: "-amd64-musl"
            base_image: "alpine:latest"
            description: "Watchexec x86_64 Alpine Linux"
          - arch: "aarch64-unknown-linux-gnu"
            platform: "linux/arm64"
            tag_suffix: "-arm64"
            base_image: "debian:bookworm-slim"
            description: "Watchexec ARM64 GNU/Linux"
          - arch: "armv7-unknown-linux-gnueabihf"
            platform: "linux/arm/v7"
            tag_suffix: "-armv7"
            base_image: "debian:bookworm-slim"
            description: "Watchexec ARMv7 GNU/Linux"
          - arch: "powerpc64le-unknown-linux-gnu"
            platform: "linux/ppc64le"
            tag_suffix: "-ppc64le"
            base_image: "debian:bookworm-slim"
            description: "Watchexec PowerPC64 LE GNU/Linux"
          - arch: "s390x-unknown-linux-gnu"
            platform: "linux/s390x"
            tag_suffix: "-s390x"
            base_image: "debian:bookworm-slim"
            description: "Watchexec s390x GNU/Linux"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get latest release
        id: latest_release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/releases/latest | jq -r .tag_name)
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          if git rev-parse ${{ env.LATEST_RELEASE }} >/dev/null 2>&1; then
            echo "Release ${{ env.LATEST_RELEASE }} already exists. Skipping."
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Download and extract release asset
        if: steps.check_release.outputs.exists == 'false'
        run: |
          set -e
          echo "Starting asset download and extraction process"
          RELEASE_DATA=$(curl -s https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/releases/latest)
          echo "Latest release data fetched"
          DOWNLOAD_URL=$(echo $RELEASE_DATA | jq -r '.assets[] | select(.name | endswith("${{ matrix.arch }}.tar.xz")) | .browser_download_url')
          echo "Download URL: $DOWNLOAD_URL"
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: Unable to find download URL for ${{ matrix.arch }}.tar.xz"
            echo "Available assets:"
            echo $RELEASE_DATA | jq -r '.assets[].name'
            exit 1
          fi
          echo "Downloading asset..."
          curl -L -o release.tar.xz $DOWNLOAD_URL
          echo "Creating extraction directory..."
          mkdir -p extracted
          echo "Extracting to ./extracted directory..."
          tar -xvf release.tar.xz -C ./extracted --strip-components=1
          echo "Extraction completed"
          echo "Moving watchexec executable..."
          mv ./extracted/watchexec ./watchexec
          echo "Setting executable permissions..."
          chmod +x watchexec
          echo "Current directory contents:"
          ls -la
          echo "Extracted directory contents:"
          ls -la ./extracted
          echo "Asset download and extraction process completed"

      - name: Set up QEMU
        if: steps.check_release.outputs.exists == 'false'
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        if: steps.check_release.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        if: steps.check_release.outputs.exists == 'false'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.check_release.outputs.exists == 'false'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:${{ env.LATEST_RELEASE }}${{ matrix.tag_suffix }}
            ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:latest${{ matrix.tag_suffix }}
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            ARCH_DESCRIPTION=${{ matrix.description }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ env.LATEST_RELEASE }}

  create-manifest:
    needs: track-releases
    runs-on: ubuntu-latest
    steps:
      - name: Get latest release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/releases/latest | jq -r .tag_name)
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          # Create and push the version-specific manifest
          docker manifest create ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:${{ env.LATEST_RELEASE }} \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:${{ env.LATEST_RELEASE }}-amd64 \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:${{ env.LATEST_RELEASE }}-amd64-musl \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:${{ env.LATEST_RELEASE }}-arm64 \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:${{ env.LATEST_RELEASE }}-armv7 \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:${{ env.LATEST_RELEASE }}-ppc64le \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:${{ env.LATEST_RELEASE }}-s390x

          docker manifest push ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:${{ env.LATEST_RELEASE }}

          # Create and push the 'latest' manifest
          docker manifest create ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:latest \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:latest-amd64 \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:latest-amd64-musl \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:latest-arm64 \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:latest-armv7 \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:latest-ppc64le \
            --amend ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:latest-s390x

          docker manifest push ghcr.io/psu3d0/${{ env.IMAGE_NAME }}:latest

      - name: Create Git tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ env.LATEST_RELEASE }}
          git push origin ${{ env.LATEST_RELEASE }}